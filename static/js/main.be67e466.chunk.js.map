{"version":3,"sources":["actions/types.js","actions/index.js","App.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["GET_POSTS","GET_USERS","getPosts","dispatch","axios","get","then","res","type","payload","data","catch","err","console","log","getUsers","override","css","App","Promise","allSettled","setTimeout","props","getPostsAPI","getUsersAPI","this","users","posts","style","display","gridTemplateColumns","margin","map","user","index","name","toUpperCase","length","size","color","slice","post","textTransform","title","React","Component","connect","state","bindActionCreators","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAAaA,EAAY,YACZC,EAAY,YCKZC,EAAW,kBAAM,SAACC,GAC3BC,IAAMC,IAAN,8CACCC,MAAK,SAACC,GAEHJ,EAAS,CAAEK,KAAMR,EAAWS,QAASF,EAAIG,UAE5CC,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAIPG,EAAW,kBAAM,SAACZ,GAC3BC,IAAMC,IAAN,8CACCC,MAAK,SAACC,GAEHJ,EAAS,CAAEK,KAAMP,EAAWQ,QAASF,EAAIG,UAE5CC,OAAM,SAACC,GACJC,QAAQC,IAAIF,Q,6JCfpB,IAAMI,EAAWC,cAAH,KAKRC,E,kLACiB,IAAD,OAClBC,QAAQC,WAAW,CACjBC,YAAW,WACT,EAAKC,MAAMC,gBACV,KACHF,YAAW,WACT,EAAKC,MAAME,gBACV,S,+BAIG,IAAD,EACkBC,KAAKH,MAAtBI,EADD,EACCA,MAAOC,EADR,EACQA,MACf,OACE,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,oBAAqB,iBAAkBC,OAAQ,IAA9E,UACE,gCACE,uCACCL,GAASA,EAAMM,KAAI,SAACC,EAAMC,GACzB,OAAO,4BAAgBD,EAAKE,KAAKC,eAAlBF,OAEfR,EAAMW,QAAU,8BAChB,cAAC,IAAD,CACEpB,IAAKD,EACLsB,KAAM,GACNC,MAAO,iBAIb,gCACE,uCACCZ,GAASA,EAAMa,MAAM,EAAE,IAAIR,KAAI,SAACS,EAAMP,GACrC,OAAO,mBAAeN,MAAO,CAAEc,cAAe,cAAvC,SAAwDD,EAAKE,OAArDT,OAEfP,EAAMU,QAAU,8BAChB,cAAC,IAAD,CACEpB,IAAKD,EACLsB,KAAM,GACNC,MAAO,wB,GAtCHK,IAAMC,WAsDxB,IAOeC,eAdf,SAAyBC,GACvB,MAAO,CACLrB,MAAOqB,EAAMrB,MACbC,MAAOoB,EAAMpB,UAIU,SAACxB,GAC1B,OAAO6C,6BAAmB,CACxBzB,YAAarB,EACbsB,YAAaT,GACZZ,KAGU2C,CAA6C5B,GC/D7C+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,eCFRO,EAAe,CACjB9B,MAAO,GACPD,MAAO,I,QCILgC,EAAQC,uBDDa,WAAmC,IAAlCZ,EAAiC,uDAAzBU,EAAcG,EAAW,uCAEzD,OAAOA,EAAOpD,MACV,KAAKP,EACD,OAAO,2BACA8C,GADP,IAEIrB,MAAOkC,EAAOnD,UAEtB,KAAKT,EACD,OAAO,2BACA+C,GADP,IAEIpB,MAAOiC,EAAOnD,UAEtB,QACI,OAAOsC,KCboBc,8BAAoBC,0BAAgBC,OAE3EC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.be67e466.chunk.js","sourcesContent":["export const GET_POSTS = 'GET_POSTS';\nexport const GET_USERS = 'GET_USERS';","import axios from 'axios';\nimport {\n    GET_POSTS,\n    GET_USERS\n} from './types';\n\nexport const getPosts = () => (dispatch) => {\n    axios.get(`https://jsonplaceholder.typicode.com/posts`)\n    .then((res) => {\n        // console.log('posts', res.data);\n        dispatch({ type: GET_POSTS, payload: res.data })\n    })\n    .catch((err) => {\n        console.log(err);\n    })\n}\n\nexport const getUsers = () => (dispatch) => {\n    axios.get(`https://jsonplaceholder.typicode.com/users`)\n    .then((res) => {\n        // console.log('users', res.data);\n        dispatch({ type: GET_USERS, payload: res.data })\n    })\n    .catch((err) => {\n        console.log(err);\n    })\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { getPosts, getUsers } from './actions';\n\nimport { css } from \"@emotion/core\";\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\n\nconst override = css`\n  display: block;\n  border-color: #00401A;\n`;\n\nclass App extends React.Component {\n  componentDidMount() {\n    Promise.allSettled([\n      setTimeout(() => {\n        this.props.getPostsAPI();\n      }, 5000),\n      setTimeout(() => {\n        this.props.getUsersAPI();\n      }, 3000) \n    ])\n  }\n\n  render() {\n    const { users, posts } = this.props;\n    return (\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 6fr)', margin: 60 }}>\n        <div>\n          <h1>Users</h1>\n          {users && users.map((user, index) => {\n            return <p key={index}>{user.name.toUpperCase()}</p>;\n          })}\n          {!users.length && <div>\n            <ClimbingBoxLoader\n              css={override}\n              size={15}\n              color={\"#00401A\"}\n            />\n          </div>}\n        </div>\n        <div>\n          <h1>Posts</h1>\n          {posts && posts.slice(0,10).map((post, index) => {\n            return <p key={index} style={{ textTransform: 'capitalize' }}>{post.title}</p>;\n          })}\n          {!posts.length && <div>\n            <SyncLoader\n              css={override}\n              size={15}\n              color={\"#00401A\"}\n            />\n          </div>}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    users: state.users,\n    posts: state.posts\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({\n    getPostsAPI: getPosts,\n    getUsersAPI: getUsers\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n    GET_USERS,\n    GET_POSTS\n} from '../actions/types';\n\nconst initialState = {\n    posts: [],\n    users: []\n}\n\nexport const rootReducer = (state = initialState, action) => {\n    // console.log(state, action);\n    switch(action.type) {\n        case GET_USERS:\n            return {\n                ...state,\n                users: action.payload\n            };\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: action.payload\n            }\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux'; \nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}